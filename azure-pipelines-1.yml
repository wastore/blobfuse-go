# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: NightlyBlobFuse
  - name: MOUNT_DIR
    value: "/home/vsts/work/blob_mnt"
  - name: TEMP_DIR
    value: "/mnt/blobfusetmp"
  - name: BLOBFUSE_CFG
    value: "/home/vsts/work/blobfuse.cfg"

steps:
# Install all required packages
- script: |
    sudo apt-get update --fix-missing
    sudo apt-get install pkg-config cmake libcurl4-gnutls-dev libgnutls28-dev uuid-dev libgcrypt20-dev libboost-all-dev gcc g++ -y
    sudo apt-get install blobfuse
    sudo apt-get install golang
  displayName: 'Basic Tools Setup'

# Install Go dependencies
- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
  displayName: 'Get dependencies'

# Build  blobfuse-go 
- script: |
    cd main
    go build filesystem.go connection.go dirapis.go fileapis.go
  displayName: 'Build blobfuseGO'

# Create dir structure for running blobfuse (go - cpp)
- script: |
    mkdir $(MOUNT_DIR)
    sudo chown -R `whoami` $(MOUNT_DIR)
    sudo chmod 777 $(MOUNT_DIR)
  displayName: 'Create Mount point'

- script: |
    sudo mkdir $(TEMP_DIR)
    sudo chown -R `whoami` $(TEMP_DIR)
    chmod 777 $(TEMP_DIR)
  displayName: 'Create Cache Directory'


# Run the blobfuse-Go implementation
- script: |
    ./filesystem --mountPath=$(MOUNT_DIR) --accountName=$(NIGHTLY_STO_ACC_NAME) --accountKey=$(NIGHTLY_STO_ACC_KEY) --containerName=$(containerName) &
  displayName: 'Mount blobfuseGO'

# Run upload test using blobfuse-go
- script: |
    STARTTIME=$(date +%s)
    dd if=/dev/zero of=$(MOUNT_DIR)/test1.txt  bs=10M  count=1
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to upload 10 MB'
    STARTTIME=$(date +%s)
    dd if=/dev/zero of=$(MOUNT_DIR)/test2.txt  bs=100M  count=1
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to upload 100 MB'
    STARTTIME=$(date +%s)
    dd if=/dev/zero of=$(MOUNT_DIR)/test3.txt  bs=200M  count=1
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to upload 200 MB'
    STARTTIME=$(date +%s)
    dd if=/dev/zero of=$(MOUNT_DIR)/test4.txt  bs=400M  count=1
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to upload 400 MB'
    STARTTIME=$(date +%s)
    dd if=/dev/zero of=$(MOUNT_DIR)/test5.txt  bs=1000M  count=1
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to upload 1000 MB'
    ls -l
  displayName: 'UploadTest - blobfuseGO'

# Unmount the blobfuse-go 
- script: |
    fusermount -u $(MOUNT_DIR)
    sudo rm -rf $(MOUNT_DIR)/*
  displayName: 'Ummount blobfuseGO'

# Run the blobfuse-Go implementation
- script: |
    ./filesystem --mountPath=$(MOUNT_DIR) --accountName=$(NIGHTLY_STO_ACC_NAME) --accountKey=$(NIGHTLY_STO_ACC_KEY) --containerName=$(containerName) &
  displayName: 'Mount blobfuseGO'

# Run download test using blobfuse-go
- script: |
    mkdir ../anuj
    sudo chmod 777 ../anuj
    chown -R `whoami` ../anuj
    STARTTIME=$(date +%s)
    cp $(MOUNT_DIR)/test1.txt ../anuj
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to download 10 MB'
    STARTTIME=$(date +%s)
    cp $(MOUNT_DIR)/test2.txt ../anuj
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to download 100 MB'
    STARTTIME=$(date +%s)
    cp $(MOUNT_DIR)/test3.txt ../anuj
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to download 200 MB'
    STARTTIME=$(date +%s)
    cp $(MOUNT_DIR)/test4.txt ../anuj
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to download 400 MB'
    STARTTIME=$(date +%s)
    cp $(MOUNT_DIR)/test5.txt ../anuj
    ENDTIME=$(date +%s)
    echo '$(($ENDTIME - $STARTTIME)) seconds to download 1000 MB'
    rm -rf ../anuj
  displayName: 'Download Test - blobfuseGO'
  
# Unmount the blobfuse-go 
- script: |
    fusermount -u $(MOUNT_DIR)
    sudo rm -rf $(MOUNT_DIR)/*
  displayName: 'Ummount blobfuseGO'

# Create the config file
- script: |
    echo 'accountName '' $(NIGHTLY_STO_ACC_NAME) > $(BLOBFUSE_CFG)
    echo 'accountKey '' $(NIGHTLY_STO_ACC_KEY) >> $(BLOBFUSE_CFG)
    echo 'authType Key' >> $(BLOBFUSE_CFG)
    echo 'containerName '' $(containerName) >> $(BLOBFUSE_CFG)
    cat $(BLOBFUSE_CFG)
  displayName: 'Create config file'

